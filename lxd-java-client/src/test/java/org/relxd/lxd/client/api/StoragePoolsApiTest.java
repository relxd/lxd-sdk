/*
 * LXD
 * The services listed below are referred as .....
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relxd.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.relxd.lxd.client.api;

import org.junit.Before;
import org.relxd.lxd.CompleteableFutureTestWrapper;
import org.relxd.lxd.RelxdApiClient;
import org.relxd.lxd.client.ApiException;
import org.relxd.lxd.client.model.BackgroundOperationResponse;
import org.relxd.lxd.client.model.CreateStoragePoolsByNameVolumesByTypeNameRequest;
import org.relxd.lxd.client.model.CreateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest;
import org.relxd.lxd.client.model.CreateStoragePoolsByNameVolumesByTypeNameSnapshotsRequest;
import org.relxd.lxd.client.model.CreateStoragePoolsByNameVolumesByTypeRequest;
import org.relxd.lxd.client.model.CreateStoragePoolsByNameVolumesRequest;
import org.relxd.lxd.client.model.CreateStoragePoolsRequest;
import org.relxd.lxd.client.model.ErrorResponse;
import org.relxd.lxd.client.model.PatchStoragePoolsByNameRequest;
import org.relxd.lxd.client.model.UpdateStoragePoolsByNameRequest;
import org.relxd.lxd.client.model.UpdateStoragePoolsByNameVolumesByTypeNameRequest;
import org.relxd.lxd.client.model.UpdateStoragePoolsByNameVolumesByTypeNameRequest2;
import org.relxd.lxd.client.model.UpdateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StoragePoolsApi
 */
@Ignore
public class StoragePoolsApiTest implements CompleteableFutureTestWrapper {

    private StoragePoolsApi api;

    @Before
    public void CertificatesApiTest() {
        var apiClient = new RelxdApiClient();
        api = apiClient.services().getStoragePoolsApi();
    }

    
    /**
     * 
     *
     * Remove a storage pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStoragePoolsByNameTest() throws ApiException {
        String pool = null;
        BackgroundOperationResponse response = $( api.deleteStoragePoolsByName(pool) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a storage volume of a given type on a given storage pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStoragePoolsByNameVolumesByTypeNameTest() throws ApiException {
        String pool = null;
        String type = null;
        String name = null;
        BackgroundOperationResponse response = $( api.deleteStoragePoolsByNameVolumesByTypeName(pool, type, name) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove the volume snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStoragePoolsByNameVolumesByTypeNameSnapshotsNameTest() throws ApiException {
        String pool = null;
        String type = null;
        String name = null;
        BackgroundOperationResponse response = $( api.deleteStoragePoolsByNameVolumesByTypeNameSnapshotsName(pool, type, name) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List of storage pools
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoragePoolsTest() throws ApiException {
        Integer recursion = null;
        String filter = null;
        BackgroundOperationResponse response = $( api.getStoragePools(recursion, filter) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Information about a storage pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoragePoolsByNameTest() throws ApiException {
        String pool = null;
        Integer recursion = null;
        String filter = null;
        BackgroundOperationResponse response = $( api.getStoragePoolsByName(pool, recursion, filter) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Information about the resources available to the storage pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoragePoolsByNameResourcesTest() throws ApiException {
        String pool = null;
        Integer recursion = null;
        String filter = null;
        BackgroundOperationResponse response = $( api.getStoragePoolsByNameResources(pool, recursion, filter) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List of storage volumes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoragePoolsByNameVolumesTest() throws ApiException {
        String pool = null;
        Integer recursion = null;
        String filter = null;
        BackgroundOperationResponse response = $( api.getStoragePoolsByNameVolumes(pool, recursion, filter) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Information about a storage volume of a given type on a storage pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoragePoolsByNameVolumesByTypeNameTest() throws ApiException {
        String pool = null;
        String type = null;
        String name = null;
        Integer recursion = null;
        String filter = null;
        BackgroundOperationResponse response = $( api.getStoragePoolsByNameVolumesByTypeName(pool, type, name, recursion, filter) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List of volume snapshots
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoragePoolsByNameVolumesByTypeNameSnapshotsTest() throws ApiException {
        String pool = null;
        String type = null;
        String name = null;
        Integer recursion = null;
        String filter = null;
        BackgroundOperationResponse response = $( api.getStoragePoolsByNameVolumesByTypeNameSnapshots(pool, type, name, recursion, filter) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Snapshot information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoragePoolsByNameVolumesByTypeNameSnapshotsNameTest() throws ApiException {
        String pool = null;
        String type = null;
        String name = null;
        Integer recursion = null;
        String filter = null;
        BackgroundOperationResponse response = $( api.getStoragePoolsByNameVolumesByTypeNameSnapshotsName(pool, type, name, recursion, filter) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update the storage pool information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchStoragePoolsByNameTest() throws ApiException {
        String pool = null;
        PatchStoragePoolsByNameRequest body = null;
        BackgroundOperationResponse response = $( api.patchStoragePoolsByName(pool, body) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update the storage volume information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchStoragePoolsByNameVolumesByTypeNameTest() throws ApiException {
        String pool = null;
        String type = null;
        String name = null;
        UpdateStoragePoolsByNameVolumesByTypeNameRequest2 body = null;
        BackgroundOperationResponse response = $( api.patchStoragePoolsByNameVolumesByTypeName(pool, type, name, body) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Define a new storage pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postStoragePoolsTest() throws ApiException {
        CreateStoragePoolsRequest body = null;
        BackgroundOperationResponse response = $( api.postStoragePools(body) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new storage volume on a given storage pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postStoragePoolsByNameVolumesTest() throws ApiException {
        String pool = null;
        CreateStoragePoolsByNameVolumesRequest body = null;
        BackgroundOperationResponse response = $( api.postStoragePoolsByNameVolumes(pool, body) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new storage volume of a particular type on a given storage pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postStoragePoolsByNameVolumesByTypeTest() throws ApiException {
        String pool = null;
        String type = null;
        CreateStoragePoolsByNameVolumesByTypeRequest body = null;
        BackgroundOperationResponse response = $( api.postStoragePoolsByNameVolumesByType(pool, type, body) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Rename a storage volume on a given storage pool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postStoragePoolsByNameVolumesByTypeNameTest() throws ApiException {
        String pool = null;
        String type = null;
        String name = null;
        CreateStoragePoolsByNameVolumesByTypeNameRequest body = null;
        BackgroundOperationResponse response = $( api.postStoragePoolsByNameVolumesByTypeName(pool, type, name, body) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new volume snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postStoragePoolsByNameVolumesByTypeNameSnapshotsTest() throws ApiException {
        String pool = null;
        String type = null;
        String name = null;
        CreateStoragePoolsByNameVolumesByTypeNameSnapshotsRequest body = null;
        BackgroundOperationResponse response = $( api.postStoragePoolsByNameVolumesByTypeNameSnapshots(pool, type, name, body) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Used to rename the volume snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postStoragePoolsByNameVolumesByTypeNameSnapshotsNameTest() throws ApiException {
        String pool = null;
        String type = null;
        String name = null;
        CreateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body = null;
        BackgroundOperationResponse response = $( api.postStoragePoolsByNameVolumesByTypeNameSnapshotsName(pool, type, name, body) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Replace the storage pool information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putStoragePoolsByNameTest() throws ApiException {
        String pool = null;
        UpdateStoragePoolsByNameRequest body = null;
        BackgroundOperationResponse response = $( api.putStoragePoolsByName(pool, body) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Replace the storage volume information or restore from snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putStoragePoolsByNameVolumesByTypeNameTest() throws ApiException {
        String pool = null;
        String type = null;
        String name = null;
        UpdateStoragePoolsByNameVolumesByTypeNameRequest body = null;
        BackgroundOperationResponse response = $( api.putStoragePoolsByNameVolumesByTypeName(pool, type, name, body) );

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Volume snapshot information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putStoragePoolsByNameVolumesByTypeNameSnapshotsNameTest() throws ApiException {
        String pool = null;
        String type = null;
        String name = null;
        UpdateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body = null;
        BackgroundOperationResponse response = $( api.putStoragePoolsByNameVolumesByTypeNameSnapshotsName(pool, type, name, body) );

        // TODO: test validations
    }
    
}
