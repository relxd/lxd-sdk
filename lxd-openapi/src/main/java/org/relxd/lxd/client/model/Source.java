/*
 * LXD
 * The services listed below are referred as .....
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relxd.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.relxd.lxd.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.relxd.lxd.client.model.Properties;
import org.relxd.lxd.client.model.Secrets;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Source
 */
@JsonPropertyOrder({
  Source.JSON_PROPERTY_TYPE,
  Source.JSON_PROPERTY_ALIAS,
  Source.JSON_PROPERTY_FINGERPRINT,
  Source.JSON_PROPERTY_PROPERTIES,
  Source.JSON_PROPERTY_MODE,
  Source.JSON_PROPERTY_SERVER,
  Source.JSON_PROPERTY_PROTOCOL,
  Source.JSON_PROPERTY_CERTIFICATE,
  Source.JSON_PROPERTY_SECRET,
  Source.JSON_PROPERTY_OPERATION,
  Source.JSON_PROPERTY_BASE_IMAGE,
  Source.JSON_PROPERTY_INSTANCE_ONLY,
  Source.JSON_PROPERTY_SECRETS,
  Source.JSON_PROPERTY_SOURCE,
  Source.JSON_PROPERTY_LIVE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Source {
  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_ALIAS = "alias";
  private String alias;

  public static final String JSON_PROPERTY_FINGERPRINT = "fingerprint";
  private String fingerprint;

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private Properties properties;

  public static final String JSON_PROPERTY_MODE = "mode";
  private String mode;

  public static final String JSON_PROPERTY_SERVER = "server";
  private String server;

  public static final String JSON_PROPERTY_PROTOCOL = "protocol";
  private String protocol;

  public static final String JSON_PROPERTY_CERTIFICATE = "certificate";
  private String certificate;

  public static final String JSON_PROPERTY_SECRET = "secret";
  private String secret;

  public static final String JSON_PROPERTY_OPERATION = "operation";
  private String operation;

  public static final String JSON_PROPERTY_BASE_IMAGE = "base-image";
  private String baseImage;

  public static final String JSON_PROPERTY_INSTANCE_ONLY = "instance_only";
  private Boolean instanceOnly;

  public static final String JSON_PROPERTY_SECRETS = "secrets";
  private Secrets secrets;

  public static final String JSON_PROPERTY_SOURCE = "source";
  private String source;

  public static final String JSON_PROPERTY_LIVE = "live";
  private Boolean live;


  public Source type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Can be \&quot;image\&quot;, \&quot;migration\&quot;, \&quot;copy\&quot; or \&quot;none\&quot;.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "image", required = true, value = "Can be \"image\", \"migration\", \"copy\" or \"none\".")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }


  public Source alias(String alias) {
    this.alias = alias;
    return this;
  }

   /**
   * Name of the alias.
   * @return alias
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ubuntu/devel", value = "Name of the alias.")
  @JsonProperty(JSON_PROPERTY_ALIAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlias() {
    return alias;
  }


  @JsonProperty(JSON_PROPERTY_ALIAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlias(String alias) {
    this.alias = alias;
  }


  public Source fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

   /**
   * Fingerprint
   * @return fingerprint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SHA-256", value = "Fingerprint")
  @JsonProperty(JSON_PROPERTY_FINGERPRINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFingerprint() {
    return fingerprint;
  }


  @JsonProperty(JSON_PROPERTY_FINGERPRINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public Source properties(Properties properties) {
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Properties getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(Properties properties) {
    this.properties = properties;
  }


  public Source mode(String mode) {
    this.mode = mode;
    return this;
  }

   /**
   * One of \&quot;local\&quot; (default) or \&quot;pull\&quot;
   * @return mode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "pull", value = "One of \"local\" (default) or \"pull\"")
  @JsonProperty(JSON_PROPERTY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMode() {
    return mode;
  }


  @JsonProperty(JSON_PROPERTY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMode(String mode) {
    this.mode = mode;
  }


  public Source server(String server) {
    this.server = server;
    return this;
  }

   /**
   * Remote server (pull mode only)
   * @return server
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://10.0.2.3:8443", value = "Remote server (pull mode only)")
  @JsonProperty(JSON_PROPERTY_SERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getServer() {
    return server;
  }


  @JsonProperty(JSON_PROPERTY_SERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServer(String server) {
    this.server = server;
  }


  public Source protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Protocol (one of lxd or simplestreams, defaults to lxd)
   * @return protocol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "lxd", value = "Protocol (one of lxd or simplestreams, defaults to lxd)")
  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProtocol() {
    return protocol;
  }


  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public Source certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

   /**
   * Optional PEM certificate. If not mentioned, system CA is used.
   * @return certificate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PEM certificate", value = "Optional PEM certificate. If not mentioned, system CA is used.")
  @JsonProperty(JSON_PROPERTY_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCertificate() {
    return certificate;
  }


  @JsonProperty(JSON_PROPERTY_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public Source secret(String secret) {
    this.secret = secret;
    return this;
  }

   /**
   * Secret to use to retrieve the image (pull mode only).
   * @return secret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "my-secret-string", value = "Secret to use to retrieve the image (pull mode only).")
  @JsonProperty(JSON_PROPERTY_SECRET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSecret() {
    return secret;
  }


  @JsonProperty(JSON_PROPERTY_SECRET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecret(String secret) {
    this.secret = secret;
  }


  public Source operation(String operation) {
    this.operation = operation;
    return this;
  }

   /**
   * Full URL to the remote operation (pull mode only).
   * @return operation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://10.0.2.3:8443/1.0/operations/<UUID>", value = "Full URL to the remote operation (pull mode only).")
  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOperation() {
    return operation;
  }


  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperation(String operation) {
    this.operation = operation;
  }


  public Source baseImage(String baseImage) {
    this.baseImage = baseImage;
    return this;
  }

   /**
   * Optional, the base image the instance was created from
   * @return baseImage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "<fingerprint>", value = "Optional, the base image the instance was created from")
  @JsonProperty(JSON_PROPERTY_BASE_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBaseImage() {
    return baseImage;
  }


  @JsonProperty(JSON_PROPERTY_BASE_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBaseImage(String baseImage) {
    this.baseImage = baseImage;
  }


  public Source instanceOnly(Boolean instanceOnly) {
    this.instanceOnly = instanceOnly;
    return this;
  }

   /**
   * Whether to migrate only the instance without snapshots. Can be \&quot;true\&quot; or \&quot;false\&quot;.
   * @return instanceOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to migrate only the instance without snapshots. Can be \"true\" or \"false\".")
  @JsonProperty(JSON_PROPERTY_INSTANCE_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getInstanceOnly() {
    return instanceOnly;
  }


  @JsonProperty(JSON_PROPERTY_INSTANCE_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstanceOnly(Boolean instanceOnly) {
    this.instanceOnly = instanceOnly;
  }


  public Source secrets(Secrets secrets) {
    this.secrets = secrets;
    return this;
  }

   /**
   * Get secrets
   * @return secrets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SECRETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Secrets getSecrets() {
    return secrets;
  }


  @JsonProperty(JSON_PROPERTY_SECRETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecrets(Secrets secrets) {
    this.secrets = secrets;
  }


  public Source source(String source) {
    this.source = source;
    return this;
  }

   /**
   * Name of the source instance
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "my-old-instance", value = "Name of the source instance")
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSource(String source) {
    this.source = source;
  }


  public Source live(Boolean live) {
    this.live = live;
    return this;
  }

   /**
   * Whether migration is performed live
   * @return live
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether migration is performed live")
  @JsonProperty(JSON_PROPERTY_LIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLive() {
    return live;
  }


  @JsonProperty(JSON_PROPERTY_LIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLive(Boolean live) {
    this.live = live;
  }


  /**
   * Return true if this Source object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Source source = (Source) o;
    return Objects.equals(this.type, source.type) &&
        Objects.equals(this.alias, source.alias) &&
        Objects.equals(this.fingerprint, source.fingerprint) &&
        Objects.equals(this.properties, source.properties) &&
        Objects.equals(this.mode, source.mode) &&
        Objects.equals(this.server, source.server) &&
        Objects.equals(this.protocol, source.protocol) &&
        Objects.equals(this.certificate, source.certificate) &&
        Objects.equals(this.secret, source.secret) &&
        Objects.equals(this.operation, source.operation) &&
        Objects.equals(this.baseImage, source.baseImage) &&
        Objects.equals(this.instanceOnly, source.instanceOnly) &&
        Objects.equals(this.secrets, source.secrets) &&
        Objects.equals(this.source, source.source) &&
        Objects.equals(this.live, source.live);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, alias, fingerprint, properties, mode, server, protocol, certificate, secret, operation, baseImage, instanceOnly, secrets, source, live);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Source {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    baseImage: ").append(toIndentedString(baseImage)).append("\n");
    sb.append("    instanceOnly: ").append(toIndentedString(instanceOnly)).append("\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    live: ").append(toIndentedString(live)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

