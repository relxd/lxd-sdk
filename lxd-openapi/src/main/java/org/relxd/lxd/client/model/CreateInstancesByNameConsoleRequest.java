/*
 * LXD
 * The services listed below are referred as .....
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relxd.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.relxd.lxd.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.relxd.lxd.client.model.Args;
import org.relxd.lxd.client.model.CreateInstancesByNameConsoleRequestOneOf;
import org.relxd.lxd.client.model.WindowSizeChangeRequest;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import com.fasterxml.jackson.core.type.TypeReference;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.relxd.lxd.client.JSON;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonDeserialize(using = CreateInstancesByNameConsoleRequest.CreateInstancesByNameConsoleRequestDeserializer.class)
@JsonSerialize(using = CreateInstancesByNameConsoleRequest.CreateInstancesByNameConsoleRequestSerializer.class)
public class CreateInstancesByNameConsoleRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CreateInstancesByNameConsoleRequest.class.getName());

    public static class CreateInstancesByNameConsoleRequestSerializer extends StdSerializer<CreateInstancesByNameConsoleRequest> {
        public CreateInstancesByNameConsoleRequestSerializer(Class<CreateInstancesByNameConsoleRequest> t) {
            super(t);
        }

        public CreateInstancesByNameConsoleRequestSerializer() {
            this(null);
        }

        @Override
        public void serialize(CreateInstancesByNameConsoleRequest value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class CreateInstancesByNameConsoleRequestDeserializer extends StdDeserializer<CreateInstancesByNameConsoleRequest> {
        public CreateInstancesByNameConsoleRequestDeserializer() {
            this(CreateInstancesByNameConsoleRequest.class);
        }

        public CreateInstancesByNameConsoleRequestDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public CreateInstancesByNameConsoleRequest deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize CreateInstancesByNameConsoleRequestOneOf
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (CreateInstancesByNameConsoleRequestOneOf.class.equals(Integer.class) || CreateInstancesByNameConsoleRequestOneOf.class.equals(Long.class) || CreateInstancesByNameConsoleRequestOneOf.class.equals(Float.class) || CreateInstancesByNameConsoleRequestOneOf.class.equals(Double.class) || CreateInstancesByNameConsoleRequestOneOf.class.equals(Boolean.class) || CreateInstancesByNameConsoleRequestOneOf.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((CreateInstancesByNameConsoleRequestOneOf.class.equals(Integer.class) || CreateInstancesByNameConsoleRequestOneOf.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((CreateInstancesByNameConsoleRequestOneOf.class.equals(Float.class) || CreateInstancesByNameConsoleRequestOneOf.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (CreateInstancesByNameConsoleRequestOneOf.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (CreateInstancesByNameConsoleRequestOneOf.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(CreateInstancesByNameConsoleRequestOneOf.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'CreateInstancesByNameConsoleRequestOneOf'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'CreateInstancesByNameConsoleRequestOneOf'", e);
            }

            // deserialize WindowSizeChangeRequest
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WindowSizeChangeRequest.class.equals(Integer.class) || WindowSizeChangeRequest.class.equals(Long.class) || WindowSizeChangeRequest.class.equals(Float.class) || WindowSizeChangeRequest.class.equals(Double.class) || WindowSizeChangeRequest.class.equals(Boolean.class) || WindowSizeChangeRequest.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WindowSizeChangeRequest.class.equals(Integer.class) || WindowSizeChangeRequest.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WindowSizeChangeRequest.class.equals(Float.class) || WindowSizeChangeRequest.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WindowSizeChangeRequest.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WindowSizeChangeRequest.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WindowSizeChangeRequest.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WindowSizeChangeRequest'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WindowSizeChangeRequest'", e);
            }

            if (match == 1) {
                CreateInstancesByNameConsoleRequest ret = new CreateInstancesByNameConsoleRequest();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for CreateInstancesByNameConsoleRequest: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public CreateInstancesByNameConsoleRequest getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "CreateInstancesByNameConsoleRequest cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<>();

    public CreateInstancesByNameConsoleRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public CreateInstancesByNameConsoleRequest(CreateInstancesByNameConsoleRequestOneOf o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreateInstancesByNameConsoleRequest(WindowSizeChangeRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("CreateInstancesByNameConsoleRequestOneOf", CreateInstancesByNameConsoleRequestOneOf.class);
        schemas.put("WindowSizeChangeRequest", WindowSizeChangeRequest.class);
        JSON.registerDescendants(CreateInstancesByNameConsoleRequest.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return CreateInstancesByNameConsoleRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CreateInstancesByNameConsoleRequestOneOf, WindowSizeChangeRequest
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(CreateInstancesByNameConsoleRequestOneOf.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WindowSizeChangeRequest.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CreateInstancesByNameConsoleRequestOneOf, WindowSizeChangeRequest");
    }

    /**
     * Get the actual instance, which can be the following:
     * CreateInstancesByNameConsoleRequestOneOf, WindowSizeChangeRequest
     *
     * @return The actual instance (CreateInstancesByNameConsoleRequestOneOf, WindowSizeChangeRequest)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreateInstancesByNameConsoleRequestOneOf`. If the actual instance is not `CreateInstancesByNameConsoleRequestOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreateInstancesByNameConsoleRequestOneOf`
     * @throws ClassCastException if the instance is not `CreateInstancesByNameConsoleRequestOneOf`
     */
    public CreateInstancesByNameConsoleRequestOneOf getCreateInstancesByNameConsoleRequestOneOf() throws ClassCastException {
        return (CreateInstancesByNameConsoleRequestOneOf)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WindowSizeChangeRequest`. If the actual instance is not `WindowSizeChangeRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WindowSizeChangeRequest`
     * @throws ClassCastException if the instance is not `WindowSizeChangeRequest`
     */
    public WindowSizeChangeRequest getWindowSizeChangeRequest() throws ClassCastException {
        return (WindowSizeChangeRequest)super.getActualInstance();
    }

}

