/*
 * LXD
 * The services listed below are referred as .....
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relxd.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.relxd.lxd.client.api;

import org.relxd.lxd.client.ApiClient;
import org.relxd.lxd.client.ApiException;
import org.relxd.lxd.client.ApiResponse;
import org.relxd.lxd.client.Pair;

import org.relxd.lxd.client.model.BackgroundOperationResponse;
import org.relxd.lxd.client.model.CreateStoragePoolsByNameVolumesByTypeNameRequest;
import org.relxd.lxd.client.model.CreateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest;
import org.relxd.lxd.client.model.CreateStoragePoolsByNameVolumesByTypeNameSnapshotsRequest;
import org.relxd.lxd.client.model.CreateStoragePoolsByNameVolumesByTypeRequest;
import org.relxd.lxd.client.model.CreateStoragePoolsByNameVolumesRequest;
import org.relxd.lxd.client.model.CreateStoragePoolsRequest;
import org.relxd.lxd.client.model.ErrorResponse;
import org.relxd.lxd.client.model.PatchStoragePoolsByNameRequest;
import org.relxd.lxd.client.model.UpdateStoragePoolsByNameRequest;
import org.relxd.lxd.client.model.UpdateStoragePoolsByNameVolumesByTypeNameRequest;
import org.relxd.lxd.client.model.UpdateStoragePoolsByNameVolumesByTypeNameRequest2;
import org.relxd.lxd.client.model.UpdateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StoragePoolsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public StoragePoolsApi() {
    this(new ApiClient());
  }

  public StoragePoolsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String> response) {
    String message = formatExceptionMessage(operationId, response.statusCode(), response.body());
    return new ApiException(response.statusCode(), message, response.headers(), response.body());
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * Remove a storage pool
   * @param pool Storage pool name (required)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> deleteStoragePoolsByName(String pool) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = deleteStoragePoolsByNameRequestBuilder(pool);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("deleteStoragePoolsByName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Remove a storage pool
   * @param pool Storage pool name (required)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> deleteStoragePoolsByNameWithHttpInfo(String pool) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = deleteStoragePoolsByNameRequestBuilder(pool);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("deleteStoragePoolsByName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder deleteStoragePoolsByNameRequestBuilder(String pool) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling deleteStoragePoolsByName");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Delete a storage volume of a given type on a given storage pool
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> deleteStoragePoolsByNameVolumesByTypeName(String pool, String type, String name) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = deleteStoragePoolsByNameVolumesByTypeNameRequestBuilder(pool, type, name);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("deleteStoragePoolsByNameVolumesByTypeName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Delete a storage volume of a given type on a given storage pool
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> deleteStoragePoolsByNameVolumesByTypeNameWithHttpInfo(String pool, String type, String name) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = deleteStoragePoolsByNameVolumesByTypeNameRequestBuilder(pool, type, name);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("deleteStoragePoolsByNameVolumesByTypeName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder deleteStoragePoolsByNameVolumesByTypeNameRequestBuilder(String pool, String type, String name) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling deleteStoragePoolsByNameVolumesByTypeName");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling deleteStoragePoolsByNameVolumesByTypeName");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteStoragePoolsByNameVolumesByTypeName");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()))
        .replace("{type}", ApiClient.urlEncode(type.toString()))
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Remove the volume snapshot
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> deleteStoragePoolsByNameVolumesByTypeNameSnapshotsName(String pool, String type, String name) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = deleteStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequestBuilder(pool, type, name);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("deleteStoragePoolsByNameVolumesByTypeNameSnapshotsName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Remove the volume snapshot
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> deleteStoragePoolsByNameVolumesByTypeNameSnapshotsNameWithHttpInfo(String pool, String type, String name) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = deleteStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequestBuilder(pool, type, name);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("deleteStoragePoolsByNameVolumesByTypeNameSnapshotsName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder deleteStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequestBuilder(String pool, String type, String name) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling deleteStoragePoolsByNameVolumesByTypeNameSnapshotsName");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling deleteStoragePoolsByNameVolumesByTypeNameSnapshotsName");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteStoragePoolsByNameVolumesByTypeNameSnapshotsName");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}/snapshots/name"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()))
        .replace("{type}", ApiClient.urlEncode(type.toString()))
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * List of storage pools
   * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
   * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> getStoragePools(Integer recursion, String filter) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getStoragePoolsRequestBuilder(recursion, filter);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getStoragePools", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * List of storage pools
   * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
   * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> getStoragePoolsWithHttpInfo(Integer recursion, String filter) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getStoragePoolsRequestBuilder(recursion, filter);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getStoragePools", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder getStoragePoolsRequestBuilder(Integer recursion, String filter) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("recursion", recursion));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Information about a storage pool
   * @param pool Storage pool name (required)
   * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
   * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> getStoragePoolsByName(String pool, Integer recursion, String filter) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getStoragePoolsByNameRequestBuilder(pool, recursion, filter);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getStoragePoolsByName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Information about a storage pool
   * @param pool Storage pool name (required)
   * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
   * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> getStoragePoolsByNameWithHttpInfo(String pool, Integer recursion, String filter) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getStoragePoolsByNameRequestBuilder(pool, recursion, filter);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getStoragePoolsByName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder getStoragePoolsByNameRequestBuilder(String pool, Integer recursion, String filter) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling getStoragePoolsByName");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("recursion", recursion));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Information about the resources available to the storage pool
   * @param pool Profiles name (required)
   * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
   * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> getStoragePoolsByNameResources(String pool, Integer recursion, String filter) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getStoragePoolsByNameResourcesRequestBuilder(pool, recursion, filter);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getStoragePoolsByNameResources", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Information about the resources available to the storage pool
   * @param pool Profiles name (required)
   * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
   * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> getStoragePoolsByNameResourcesWithHttpInfo(String pool, Integer recursion, String filter) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getStoragePoolsByNameResourcesRequestBuilder(pool, recursion, filter);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getStoragePoolsByNameResources", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder getStoragePoolsByNameResourcesRequestBuilder(String pool, Integer recursion, String filter) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling getStoragePoolsByNameResources");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}/resources"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("recursion", recursion));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * List of storage volumes
   * @param pool Storage pool name (required)
   * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
   * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> getStoragePoolsByNameVolumes(String pool, Integer recursion, String filter) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getStoragePoolsByNameVolumesRequestBuilder(pool, recursion, filter);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getStoragePoolsByNameVolumes", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * List of storage volumes
   * @param pool Storage pool name (required)
   * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
   * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> getStoragePoolsByNameVolumesWithHttpInfo(String pool, Integer recursion, String filter) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getStoragePoolsByNameVolumesRequestBuilder(pool, recursion, filter);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getStoragePoolsByNameVolumes", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder getStoragePoolsByNameVolumesRequestBuilder(String pool, Integer recursion, String filter) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling getStoragePoolsByNameVolumes");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}/volumes"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("recursion", recursion));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Information about a storage volume of a given type on a storage pool
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
   * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> getStoragePoolsByNameVolumesByTypeName(String pool, String type, String name, Integer recursion, String filter) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getStoragePoolsByNameVolumesByTypeNameRequestBuilder(pool, type, name, recursion, filter);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getStoragePoolsByNameVolumesByTypeName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Information about a storage volume of a given type on a storage pool
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
   * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> getStoragePoolsByNameVolumesByTypeNameWithHttpInfo(String pool, String type, String name, Integer recursion, String filter) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getStoragePoolsByNameVolumesByTypeNameRequestBuilder(pool, type, name, recursion, filter);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getStoragePoolsByNameVolumesByTypeName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder getStoragePoolsByNameVolumesByTypeNameRequestBuilder(String pool, String type, String name, Integer recursion, String filter) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling getStoragePoolsByNameVolumesByTypeName");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling getStoragePoolsByNameVolumesByTypeName");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getStoragePoolsByNameVolumesByTypeName");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()))
        .replace("{type}", ApiClient.urlEncode(type.toString()))
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("recursion", recursion));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * List of volume snapshots
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
   * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> getStoragePoolsByNameVolumesByTypeNameSnapshots(String pool, String type, String name, Integer recursion, String filter) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getStoragePoolsByNameVolumesByTypeNameSnapshotsRequestBuilder(pool, type, name, recursion, filter);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getStoragePoolsByNameVolumesByTypeNameSnapshots", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * List of volume snapshots
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
   * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> getStoragePoolsByNameVolumesByTypeNameSnapshotsWithHttpInfo(String pool, String type, String name, Integer recursion, String filter) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getStoragePoolsByNameVolumesByTypeNameSnapshotsRequestBuilder(pool, type, name, recursion, filter);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getStoragePoolsByNameVolumesByTypeNameSnapshots", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder getStoragePoolsByNameVolumesByTypeNameSnapshotsRequestBuilder(String pool, String type, String name, Integer recursion, String filter) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling getStoragePoolsByNameVolumesByTypeNameSnapshots");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling getStoragePoolsByNameVolumesByTypeNameSnapshots");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getStoragePoolsByNameVolumesByTypeNameSnapshots");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}/snapshots"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()))
        .replace("{type}", ApiClient.urlEncode(type.toString()))
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("recursion", recursion));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Snapshot information
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
   * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> getStoragePoolsByNameVolumesByTypeNameSnapshotsName(String pool, String type, String name, Integer recursion, String filter) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequestBuilder(pool, type, name, recursion, filter);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getStoragePoolsByNameVolumesByTypeNameSnapshotsName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Snapshot information
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
   * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> getStoragePoolsByNameVolumesByTypeNameSnapshotsNameWithHttpInfo(String pool, String type, String name, Integer recursion, String filter) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequestBuilder(pool, type, name, recursion, filter);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getStoragePoolsByNameVolumesByTypeNameSnapshotsName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder getStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequestBuilder(String pool, String type, String name, Integer recursion, String filter) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling getStoragePoolsByNameVolumesByTypeNameSnapshotsName");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling getStoragePoolsByNameVolumesByTypeNameSnapshotsName");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getStoragePoolsByNameVolumesByTypeNameSnapshotsName");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}/snapshots/name"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()))
        .replace("{type}", ApiClient.urlEncode(type.toString()))
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("recursion", recursion));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update the storage pool information
   * @param pool Storage pool name (required)
   * @param body Update the storage pool information (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> patchStoragePoolsByName(String pool, PatchStoragePoolsByNameRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = patchStoragePoolsByNameRequestBuilder(pool, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("patchStoragePoolsByName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Update the storage pool information
   * @param pool Storage pool name (required)
   * @param body Update the storage pool information (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> patchStoragePoolsByNameWithHttpInfo(String pool, PatchStoragePoolsByNameRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = patchStoragePoolsByNameRequestBuilder(pool, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("patchStoragePoolsByName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder patchStoragePoolsByNameRequestBuilder(String pool, PatchStoragePoolsByNameRequest body) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling patchStoragePoolsByName");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update the storage volume information
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param body Update the storage volume information (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> patchStoragePoolsByNameVolumesByTypeName(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameRequest2 body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = patchStoragePoolsByNameVolumesByTypeNameRequestBuilder(pool, type, name, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("patchStoragePoolsByNameVolumesByTypeName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Update the storage volume information
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param body Update the storage volume information (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> patchStoragePoolsByNameVolumesByTypeNameWithHttpInfo(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameRequest2 body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = patchStoragePoolsByNameVolumesByTypeNameRequestBuilder(pool, type, name, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("patchStoragePoolsByNameVolumesByTypeName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder patchStoragePoolsByNameVolumesByTypeNameRequestBuilder(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameRequest2 body) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling patchStoragePoolsByNameVolumesByTypeName");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling patchStoragePoolsByNameVolumesByTypeName");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling patchStoragePoolsByNameVolumesByTypeName");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()))
        .replace("{type}", ApiClient.urlEncode(type.toString()))
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Define a new storage pool
   * @param body Define a new storage pool (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> postStoragePools(CreateStoragePoolsRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = postStoragePoolsRequestBuilder(body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("postStoragePools", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Define a new storage pool
   * @param body Define a new storage pool (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> postStoragePoolsWithHttpInfo(CreateStoragePoolsRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = postStoragePoolsRequestBuilder(body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("postStoragePools", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder postStoragePoolsRequestBuilder(CreateStoragePoolsRequest body) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create a new storage volume on a given storage pool
   * @param pool Storage pool name (required)
   * @param body Create a new storage volume on a given storage pool (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> postStoragePoolsByNameVolumes(String pool, CreateStoragePoolsByNameVolumesRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = postStoragePoolsByNameVolumesRequestBuilder(pool, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("postStoragePoolsByNameVolumes", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Create a new storage volume on a given storage pool
   * @param pool Storage pool name (required)
   * @param body Create a new storage volume on a given storage pool (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> postStoragePoolsByNameVolumesWithHttpInfo(String pool, CreateStoragePoolsByNameVolumesRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = postStoragePoolsByNameVolumesRequestBuilder(pool, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("postStoragePoolsByNameVolumes", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder postStoragePoolsByNameVolumesRequestBuilder(String pool, CreateStoragePoolsByNameVolumesRequest body) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling postStoragePoolsByNameVolumes");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}/volumes"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create a new storage volume of a particular type on a given storage pool
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param body Create a new storage volume of a particular type on a given storage pool (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> postStoragePoolsByNameVolumesByType(String pool, String type, CreateStoragePoolsByNameVolumesByTypeRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = postStoragePoolsByNameVolumesByTypeRequestBuilder(pool, type, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("postStoragePoolsByNameVolumesByType", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Create a new storage volume of a particular type on a given storage pool
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param body Create a new storage volume of a particular type on a given storage pool (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> postStoragePoolsByNameVolumesByTypeWithHttpInfo(String pool, String type, CreateStoragePoolsByNameVolumesByTypeRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = postStoragePoolsByNameVolumesByTypeRequestBuilder(pool, type, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("postStoragePoolsByNameVolumesByType", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder postStoragePoolsByNameVolumesByTypeRequestBuilder(String pool, String type, CreateStoragePoolsByNameVolumesByTypeRequest body) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling postStoragePoolsByNameVolumesByType");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling postStoragePoolsByNameVolumesByType");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()))
        .replace("{type}", ApiClient.urlEncode(type.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Rename a storage volume on a given storage pool
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param body Rename a storage volume on a given storage pool (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> postStoragePoolsByNameVolumesByTypeName(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = postStoragePoolsByNameVolumesByTypeNameRequestBuilder(pool, type, name, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("postStoragePoolsByNameVolumesByTypeName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Rename a storage volume on a given storage pool
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param body Rename a storage volume on a given storage pool (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> postStoragePoolsByNameVolumesByTypeNameWithHttpInfo(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = postStoragePoolsByNameVolumesByTypeNameRequestBuilder(pool, type, name, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("postStoragePoolsByNameVolumesByTypeName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder postStoragePoolsByNameVolumesByTypeNameRequestBuilder(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameRequest body) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling postStoragePoolsByNameVolumesByTypeName");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling postStoragePoolsByNameVolumesByTypeName");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling postStoragePoolsByNameVolumesByTypeName");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()))
        .replace("{type}", ApiClient.urlEncode(type.toString()))
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create a new volume snapshot
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param body Create a new volume snapshot (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> postStoragePoolsByNameVolumesByTypeNameSnapshots(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameSnapshotsRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = postStoragePoolsByNameVolumesByTypeNameSnapshotsRequestBuilder(pool, type, name, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("postStoragePoolsByNameVolumesByTypeNameSnapshots", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Create a new volume snapshot
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param body Create a new volume snapshot (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> postStoragePoolsByNameVolumesByTypeNameSnapshotsWithHttpInfo(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameSnapshotsRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = postStoragePoolsByNameVolumesByTypeNameSnapshotsRequestBuilder(pool, type, name, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("postStoragePoolsByNameVolumesByTypeNameSnapshots", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder postStoragePoolsByNameVolumesByTypeNameSnapshotsRequestBuilder(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameSnapshotsRequest body) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling postStoragePoolsByNameVolumesByTypeNameSnapshots");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling postStoragePoolsByNameVolumesByTypeNameSnapshots");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling postStoragePoolsByNameVolumesByTypeNameSnapshots");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}/snapshots"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()))
        .replace("{type}", ApiClient.urlEncode(type.toString()))
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Used to rename the volume snapshot
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param body Used to rename the volume snapshot (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> postStoragePoolsByNameVolumesByTypeNameSnapshotsName(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = postStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequestBuilder(pool, type, name, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("postStoragePoolsByNameVolumesByTypeNameSnapshotsName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Used to rename the volume snapshot
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param body Used to rename the volume snapshot (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> postStoragePoolsByNameVolumesByTypeNameSnapshotsNameWithHttpInfo(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = postStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequestBuilder(pool, type, name, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("postStoragePoolsByNameVolumesByTypeNameSnapshotsName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder postStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequestBuilder(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling postStoragePoolsByNameVolumesByTypeNameSnapshotsName");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling postStoragePoolsByNameVolumesByTypeNameSnapshotsName");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling postStoragePoolsByNameVolumesByTypeNameSnapshotsName");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}/snapshots/name"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()))
        .replace("{type}", ApiClient.urlEncode(type.toString()))
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Replace the storage pool information
   * @param pool Storage pool name (required)
   * @param body Replace the storage pool information (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> putStoragePoolsByName(String pool, UpdateStoragePoolsByNameRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = putStoragePoolsByNameRequestBuilder(pool, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("putStoragePoolsByName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Replace the storage pool information
   * @param pool Storage pool name (required)
   * @param body Replace the storage pool information (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> putStoragePoolsByNameWithHttpInfo(String pool, UpdateStoragePoolsByNameRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = putStoragePoolsByNameRequestBuilder(pool, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("putStoragePoolsByName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder putStoragePoolsByNameRequestBuilder(String pool, UpdateStoragePoolsByNameRequest body) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling putStoragePoolsByName");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Replace the storage volume information or restore from snapshot
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param body Replace the storage volume information or restore from snapshot (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> putStoragePoolsByNameVolumesByTypeName(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = putStoragePoolsByNameVolumesByTypeNameRequestBuilder(pool, type, name, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("putStoragePoolsByNameVolumesByTypeName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Replace the storage volume information or restore from snapshot
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param body Replace the storage volume information or restore from snapshot (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> putStoragePoolsByNameVolumesByTypeNameWithHttpInfo(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = putStoragePoolsByNameVolumesByTypeNameRequestBuilder(pool, type, name, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("putStoragePoolsByNameVolumesByTypeName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder putStoragePoolsByNameVolumesByTypeNameRequestBuilder(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameRequest body) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling putStoragePoolsByNameVolumesByTypeName");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling putStoragePoolsByNameVolumesByTypeName");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling putStoragePoolsByNameVolumesByTypeName");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()))
        .replace("{type}", ApiClient.urlEncode(type.toString()))
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Volume snapshot information
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param body Volume snapshot information (optional)
   * @return CompletableFuture&lt;BackgroundOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<BackgroundOperationResponse> putStoragePoolsByNameVolumesByTypeNameSnapshotsName(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = putStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequestBuilder(pool, type, name, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("putStoragePoolsByNameVolumesByTypeNameSnapshotsName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * Volume snapshot information
   * @param pool Storage pool name (required)
   * @param type Type of the volume (required)
   * @param name name (required)
   * @param body Volume snapshot information (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;BackgroundOperationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<BackgroundOperationResponse>> putStoragePoolsByNameVolumesByTypeNameSnapshotsNameWithHttpInfo(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = putStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequestBuilder(pool, type, name, body);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("putStoragePoolsByNameVolumesByTypeNameSnapshotsName", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<BackgroundOperationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BackgroundOperationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder putStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequestBuilder(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body) throws ApiException {
    // verify the required parameter 'pool' is set
    if (pool == null) {
      throw new ApiException(400, "Missing the required parameter 'pool' when calling putStoragePoolsByNameVolumesByTypeNameSnapshotsName");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling putStoragePoolsByNameVolumesByTypeNameSnapshotsName");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling putStoragePoolsByNameVolumesByTypeNameSnapshotsName");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}/snapshots/name"
        .replace("{pool}", ApiClient.urlEncode(pool.toString()))
        .replace("{type}", ApiClient.urlEncode(type.toString()))
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
