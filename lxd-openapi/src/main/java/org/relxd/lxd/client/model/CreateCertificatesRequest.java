/*
 * LXD
 * The services listed below are referred as .....
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relxd.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.relxd.lxd.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * CreateCertificatesRequest
 */
@JsonPropertyOrder({
  CreateCertificatesRequest.JSON_PROPERTY_TYPE,
  CreateCertificatesRequest.JSON_PROPERTY_CERTIFICATE,
  CreateCertificatesRequest.JSON_PROPERTY_NAME,
  CreateCertificatesRequest.JSON_PROPERTY_PASSWORD
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateCertificatesRequest {
  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_CERTIFICATE = "certificate";
  private String certificate;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private String password;


  public CreateCertificatesRequest type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Certificate type (keyring), currently only client
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "client", value = "Certificate type (keyring), currently only client")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public CreateCertificatesRequest certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

   /**
   * If provided, a valid x509 certificate. If not, the client certificate of the connection will be used
   * @return certificate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PEM certificate", value = "If provided, a valid x509 certificate. If not, the client certificate of the connection will be used")
  @JsonProperty(JSON_PROPERTY_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCertificate() {
    return certificate;
  }


  @JsonProperty(JSON_PROPERTY_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public CreateCertificatesRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * An optional name for the certificate. If nothing is provided, the host in the TLS header for the request is used.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "foo", value = "An optional name for the certificate. If nothing is provided, the host in the TLS header for the request is used.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public CreateCertificatesRequest password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The trust password for that server (only required if untrusted)
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "server-trust-password", value = "The trust password for that server (only required if untrusted)")
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassword(String password) {
    this.password = password;
  }


  /**
   * Return true if this CreateCertificatesRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCertificatesRequest createCertificatesRequest = (CreateCertificatesRequest) o;
    return Objects.equals(this.type, createCertificatesRequest.type) &&
        Objects.equals(this.certificate, createCertificatesRequest.certificate) &&
        Objects.equals(this.name, createCertificatesRequest.name) &&
        Objects.equals(this.password, createCertificatesRequest.password);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, certificate, name, password);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCertificatesRequest {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

