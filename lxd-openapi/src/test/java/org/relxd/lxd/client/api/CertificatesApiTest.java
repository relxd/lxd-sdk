/*
 * LXD
 * The services listed below are referred as .....
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relxd.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.relxd.lxd.client.api;

import org.relxd.lxd.client.ApiException;
import org.relxd.lxd.client.model.BackgroundOperationResponse;
import org.relxd.lxd.client.model.CreateCertificatesRequest;
import org.relxd.lxd.client.model.ErrorResponse;
import org.relxd.lxd.client.model.UpdateFingerprintRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import java.util.concurrent.CompletableFuture;

/**
 * API tests for CertificatesApi
 */
@Ignore
public class CertificatesApiTest {

    private final CertificatesApi api = new CertificatesApi();

    
    /**
     * 
     *
     * Remove a trusted certificate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFingerprintTest() throws ApiException {
        String fingerprint = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.deleteFingerprint(fingerprint);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return a list of trusted certificates
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCertificatesTest() throws ApiException {
        Integer recursion = null;
        String filter = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.getCertificates(recursion, filter);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return a trusted certificate information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCertificatesByFingerPrintTest() throws ApiException {
        String fingerprint = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.getCertificatesByFingerPrint(fingerprint);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates the certificate properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchFingerprintTest() throws ApiException {
        String fingerprint = null;
        UpdateFingerprintRequest body = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.patchFingerprint(fingerprint, body);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add a new trusted certificate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCertificatesTest() throws ApiException {
        CreateCertificatesRequest body = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.postCertificates(body);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Replaces the certificate properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putFingerprintTest() throws ApiException {
        String fingerprint = null;
        UpdateFingerprintRequest body = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.putFingerprint(fingerprint, body);
        
        // TODO: test validations
    }
    
}
