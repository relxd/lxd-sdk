/*
 * LXD
 * The services listed below are referred as .....
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relxd.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.relxd.lxd.client.api;

import org.relxd.lxd.client.ApiException;
import org.relxd.lxd.client.model.BackgroundOperationResponse;
import org.relxd.lxd.client.model.CreateNetworksByNameRequest;
import org.relxd.lxd.client.model.CreateNetworksRequest;
import org.relxd.lxd.client.model.ErrorResponse;
import org.relxd.lxd.client.model.PatchNetworksByNameRequest;
import org.relxd.lxd.client.model.UpdateNetworksByNameRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import java.util.concurrent.CompletableFuture;

/**
 * API tests for NetworksApi
 */
@Ignore
public class NetworksApiTest {

    private final NetworksApi api = new NetworksApi();

    
    /**
     * 
     *
     * Remove a network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworksByNameTest() throws ApiException {
        String name = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.deleteNetworksByName(name);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * List of networks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworksTest() throws ApiException {
        Integer recursion = null;
        String filter = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.getNetworks(recursion, filter);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Information about a network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworksByNameTest() throws ApiException {
        String name = null;
        Integer recursion = null;
        String filter = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.getNetworksByName(name, recursion, filter);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Network state
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworksByNameStateTest() throws ApiException {
        String name = null;
        Integer recursion = null;
        String filter = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.getNetworksByNameState(name, recursion, filter);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update the network information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNetworksByNameTest() throws ApiException {
        String name = null;
        PatchNetworksByNameRequest body = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.patchNetworksByName(name, body);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Define a new network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNetworksTest() throws ApiException {
        CreateNetworksRequest body = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.postNetworks(body);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Rename a network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNetworksByNameTest() throws ApiException {
        String name = null;
        CreateNetworksByNameRequest body = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.postNetworksByName(name, body);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Replace the network information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNetworksByNameTest() throws ApiException {
        String name = null;
        UpdateNetworksByNameRequest body = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.putNetworksByName(name, body);
        
        // TODO: test validations
    }
    
}
