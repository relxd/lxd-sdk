/*
 * LXD
 * The services listed below are referred as .....
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relxd.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.relxd.lxd.client.api;

import org.relxd.lxd.client.ApiException;
import org.relxd.lxd.client.model.BackgroundOperationResponse;
import java.math.BigDecimal;
import org.relxd.lxd.client.model.ErrorResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import java.util.concurrent.CompletableFuture;

/**
 * API tests for OperationsApi
 */
@Ignore
public class OperationsApiTest {

    private final OperationsApi api = new OperationsApi();

    
    /**
     * 
     *
     * Cancel an operation. Calling this will change the state to \&quot;cancelling\&quot; rather than actually removing the entry.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperationsUUIDTest() throws ApiException {
        String uuid = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.deleteOperationsUUID(uuid);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * List of operations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOperationsTest() throws ApiException {
        Integer recursion = null;
        String filter = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.getOperations(recursion, filter);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Background operation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOperationsUUIDTest() throws ApiException {
        String uuid = null;
        Integer recursion = null;
        String filter = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.getOperationsUUID(uuid, recursion, filter);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Wait for an operation to finish
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOperationsUUIDWaitTest() throws ApiException {
        String uuid = null;
        Integer recursion = null;
        String filter = null;
        BigDecimal timeout = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.getOperationsUUIDWait(uuid, recursion, filter, timeout);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * -&lt; This connection is upgraded into a websocket connection speaking the protocol defined by the operation type. For example, in the case of an exec operation, the websocket is the bidirectional pipe for stdin/stdout/stderr to flow to and from the process inside the instance. In the case of migration, it will be the primary interface over which the migration information is communicated. The secret here is the one that was provided when the operation was created. Guests are allowed to connect provided they have the right secret.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOperationsUUIDWebsocketTest() throws ApiException {
        String uuid = null;
        String secret = null;
        Integer recursion = null;
        String filter = null;
        CompletableFuture<BackgroundOperationResponse> response = 
        api.getOperationsUUIDWebsocket(uuid, secret, recursion, filter);
        
        // TODO: test validations
    }
    
}
